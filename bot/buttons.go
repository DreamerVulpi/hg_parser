package bot

import (
	"fmt"
	"hg_parser/db"
	"hg_parser/web_scraper"

	telegramBot "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var SearchMenu = telegramBot.NewReplyKeyboard(
	telegramBot.NewKeyboardButtonRow(
		telegramBot.NewKeyboardButton("üîé –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
		telegramBot.NewKeyboardButton("üéõ –§–∏–ª—å—Ç—Ä"),
	),
)

var FilterMenu = telegramBot.NewReplyKeyboard(
	telegramBot.NewKeyboardButtonRow(
		telegramBot.NewKeyboardButton("üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"),
		telegramBot.NewKeyboardButton("üåö –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–≥—Ä–æ–∫–∞"),
		telegramBot.NewKeyboardButton("üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤"),
		telegramBot.NewKeyboardButton("‚åõ –í—Ä–µ–º—è –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"),
	),
	telegramBot.NewKeyboardButtonRow(
		telegramBot.NewKeyboardButton("üéõ –°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞"),
	),
)

func (bot *Bot) UpdateTimesession() error {
	switch bot.fsm.Current() {
	case "start":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–µ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
		err = bot.fsm.Event(bot.ctx, FilterMenu.Keyboard[0][3].Text)
		if err != nil {
			return err
		}
	case "updateTimesession":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "?")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
	}
	return nil
}

func (bot *Bot) UpdateCountPlayers() error {
	switch bot.fsm.Current() {
	case "start":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–æ—Ç 1 –¥–æ 8 —á–µ–ª–æ–≤–µ–∫)")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
		err = bot.fsm.Event(bot.ctx, FilterMenu.Keyboard[0][2].Text)
		if err != nil {
			return err
		}
	case "updateCountplayers":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "?")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
	}
	return nil
}

func (bot *Bot) UpdateAge() error {
	switch bot.fsm.Current() {
	case "start":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–≥—Ä–æ–∫–∞. (0 - –ª—é–±–æ–π, –¥–æ 18)")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
		err = bot.fsm.Event(bot.ctx, FilterMenu.Keyboard[0][1].Text)
		if err != nil {
			return err
		}
	case "updateAge":
		msg := telegramBot.NewMessage(bot.update.Message.Chat.ID, "?")
		_, err := bot.telegramBot.Send(msg)
		if err != nil {
			return err
		}
	}
	return nil
}

func (bot *Bot) UpdatePrice() error {
	switch bot.fsm.Current() {
	case "start":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
		err = bot.fsm.Event(bot.ctx, FilterMenu.Keyboard[0][0].Text)
		if err != nil {
			return err
		}
	case "updatePrice":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "?")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
	}
	return nil
}

func (bot *Bot) UpdateStatusFilter() error {
	switch bot.fsm.Current() {
	case "start":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞ (–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å - 1 –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å - 0)")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
		err = bot.fsm.Event(bot.ctx, FilterMenu.Keyboard[1][0].Text)
		if err != nil {
			return err
		}
	case "updateStatusFilter":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "?")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
	}
	return nil
}

func (bot *Bot) SearchProducts() error {
	switch bot.fsm.Current() {
	case "start":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
		err = bot.fsm.Event(bot.ctx, SearchMenu.Keyboard[0][0].Text)
		if err != nil {
			return err
		}
	case "search":
		bot.msg = telegramBot.NewMessage(bot.update.Message.Chat.ID, "?")
		_, err := bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
	}
	return nil
}

func (bot *Bot) Filter() error {
	bot.msg.ReplyMarkup = FilterMenu
	config, err := db.GetConfig(bot.conn, bot.update.Message.Chat.ID)
	if err != nil {
		bot.msg.Text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
		return nil
	}
	bot.msg.Text = fmt.Sprintf("–¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä:\nüìâ –¶–µ–Ω–∞ %s ‚ÇΩ\nüåö –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: %s\nüé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: %s\n‚åõ –í—Ä–µ–º—è –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö): %s\nüéõ –°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞: %s", config["price"], config["age"], config["countplayers"], config["timesession"], config["switch"])
	bot.telegramBot.Send(bot.msg)
	return nil
}

func (bot *Bot) eventsButtons() error {
	switch bot.fsm.Current() {
	case "updatePrice":
		err := db.UpdatePrice(bot.conn, bot.update.Message.Chat.ID, bot.update.Message.Text)
		if err != nil {
			return err
		}
		bot.msg.Text = "–¶–µ–Ω–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞."
		_, err = bot.telegramBot.Send(bot.msg)
		if err != nil {
			return nil
		}
		err = bot.fsm.Event(bot.ctx, "cancel")
		if err != nil {
			return err
		}
	case "updateAge":
		err := db.UpdateAge(bot.conn, bot.update.Message.Chat.ID, bot.update.Message.Text)
		if err != nil {
			return err
		}
		bot.msg.Text = "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω."
		_, err = bot.telegramBot.Send(bot.msg)
		if err != nil {
			return nil
		}
		err = bot.fsm.Event(bot.ctx, "cancel")
		if err != nil {
			return err
		}
	case "updateCountplayers":
		err := db.UpdateCountPlayers(bot.conn, bot.update.Message.Chat.ID, bot.update.Message.Text)
		if err != nil {
			return err
		}
		bot.msg.Text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ñ–∏–ª—å—Ç—Ä–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ."
		_, err = bot.telegramBot.Send(bot.msg)
		if err != nil {
			return nil
		}
		err = bot.fsm.Event(bot.ctx, "cancel")
		if err != nil {
			return err
		}
	case "updateTimesession":
		err := db.UpdateTimeSession(bot.conn, bot.update.Message.Chat.ID, bot.update.Message.Text)
		if err != nil {
			return err
		}
		bot.msg.Text = "–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —Ñ–∏–ª—å—Ç—Ä–µ —É—Å–ø–µ—à–Ω–æ."
		_, err = bot.telegramBot.Send(bot.msg)
		if err != nil {
			return nil
		}
		err = bot.fsm.Event(bot.ctx, "cancel")
		if err != nil {
			return err
		}
	case "updateStatusFilter":
		err := db.UpdateStateFilter(bot.conn, bot.update.Message.Chat.ID, bot.update.Message.Text)
		if err != nil {
			return err
		}
		bot.msg.Text = "–°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ."
		_, err = bot.telegramBot.Send(bot.msg)
		if err != nil {
			return err
		}
		err = bot.fsm.Event(bot.ctx, "cancel")
		if err != nil {
			return err
		}
	case "search":
		filter, err := db.GetConfig(bot.conn, bot.update.Message.Chat.ID)
		if err != nil {
			return err
		}
		collector := web_scraper.Init()
		bot.msg.Text = "–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
		bot.telegramBot.Send(bot.msg)
		result := web_scraper.ParseProducts(collector, filter, bot.update.Message.Text)
		for _, element := range result {
			text := element.Name + "\n" + "üìâ " + element.Price + "\n" + element.Link + "\n"
			if element.AgePlayers != "" {
				text += "üåö " + element.AgePlayers + "\n"
			}
			if element.TimeSession != "" {
				text += "‚åõ " + element.TimeSession + "\n"
			}
			if element.CountPlayers != "" {
				text += "üé≤ " + element.CountPlayers + "\n"
			}
			telegramBot.NewInputMediaPhoto(telegramBot.FileURL(element.Img))
			bot.msg.Text = text
			bot.telegramBot.Send(bot.msg)
		}
		err = bot.fsm.Event(bot.ctx, "cancel")
		if err != nil {
			return err
		}
	}
	return nil
}
